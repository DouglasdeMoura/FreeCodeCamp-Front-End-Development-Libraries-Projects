{"version":3,"file":"twenty-five-plus-five-clock.stories.fb48d985.js","sources":["../../../node_modules/accurate-interval/index.js","../../../src/pages/twenty-five-plus-five-clock/twenty-five-plus-five-clock.hooks.tsx","../../../node_modules/date-fns/esm/_lib/toInteger/index.js","../../../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../../../node_modules/date-fns/esm/toDate/index.js","../../../node_modules/date-fns/esm/addDays/index.js","../../../node_modules/date-fns/esm/addMonths/index.js","../../../node_modules/date-fns/esm/add/index.js","../../../node_modules/date-fns/esm/addMilliseconds/index.js","../../../node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","../../../node_modules/date-fns/esm/startOfDay/index.js","../../../node_modules/date-fns/esm/differenceInCalendarDays/index.js","../../../node_modules/date-fns/esm/addMinutes/index.js","../../../node_modules/date-fns/esm/addSeconds/index.js","../../../node_modules/date-fns/esm/compareAsc/index.js","../../../node_modules/date-fns/esm/constants/index.js","../../../node_modules/date-fns/esm/differenceInCalendarMonths/index.js","../../../node_modules/date-fns/esm/differenceInCalendarYears/index.js","../../../node_modules/date-fns/esm/differenceInDays/index.js","../../../node_modules/date-fns/esm/differenceInMilliseconds/index.js","../../../node_modules/date-fns/esm/_lib/roundingMethods/index.js","../../../node_modules/date-fns/esm/differenceInHours/index.js","../../../node_modules/date-fns/esm/differenceInMinutes/index.js","../../../node_modules/date-fns/esm/endOfDay/index.js","../../../node_modules/date-fns/esm/endOfMonth/index.js","../../../node_modules/date-fns/esm/isLastDayOfMonth/index.js","../../../node_modules/date-fns/esm/differenceInMonths/index.js","../../../node_modules/date-fns/esm/differenceInSeconds/index.js","../../../node_modules/date-fns/esm/differenceInYears/index.js","../../../node_modules/date-fns/esm/intervalToDuration/index.js","../../../src/pages/twenty-five-plus-five-clock/twenty-five-plus-five-clock.tsx"],"sourcesContent":["/**\n * Create an accurate interval that does not skew over time.\n * @param  {function}   func            Function to call ever interval ms\n * @param  {number}     interval        Interval (in ms) with which to call func\n * @param  {Object}     opts            Interval (in ms) with which to call func\n * @param  {boolean}    opts.aligned    Align timestamps\n * @param  {boolean}    opts.immediate  Call func immediately as well\n * @return {Object}                     Object with clear method\n */\nmodule.exports = function accurateInterval(func, interval, opts) {\n\n    if (!opts) opts = {};\n\n    var clear, nextAt, timeout, wrapper, now;\n\n    now = new Date().getTime();\n\n    nextAt = now;\n\n    if (opts.aligned) {\n        nextAt += interval - (now % interval);\n    }\n    if (!opts.immediate) {\n        nextAt += interval;\n    }\n\n    timeout = null;\n\n    wrapper = function wrapper() {\n        var scheduledTime = nextAt;\n        nextAt += interval;\n        timeout = setTimeout(wrapper, nextAt - new Date().getTime());\n        func(scheduledTime);\n    };\n\n    clear = function clear() {\n        return clearTimeout(timeout);\n    };\n\n    timeout = setTimeout(wrapper, nextAt - new Date().getTime());\n\n    return {\n        clear: clear\n    };\n\n  };\n","import { useEffect, useRef } from 'react'\n\nimport accurateInterval from 'accurate-interval'\n\n/**\n * Declare a function to be executed based on a\n * time interval. Based on Dan Abramov's post\n * {@link https://overreacted.io/making-setinterval-declarative-with-react-hooks/ Making setInterval Declarative with React Hooks}\n *\n * @param callback The callback that should be executed\n * @param delay The interval to execute the callback (in miliseconds)\n */\n\nexport function useInterval(callback: () => void, delay: null | number) {\n  const savedCallback = useRef<() => void>()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current?.()\n    }\n\n    if (delay !== null) {\n      const interval = accurateInterval(tick, delay, {\n        aligned: false,\n        immediate: false,\n      })\n      return () => interval.clear()\n    }\n  }, [delay])\n}\n","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\n\nexport default function addSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Days in 1 year\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * @name daysInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var daysInYear = 365.2425;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;\n/**\n * Seconds in 1 day\n *\n * @name secondsInDay\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInDay = secondsInHour * 24;\n/**\n * Seconds in 1 week\n *\n * @name secondsInWeek\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInWeek = secondsInDay * 7;\n/**\n * Seconds in 1 year\n *\n * @name secondsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInYear = secondsInDay * daysInYear;\n/**\n * Seconds in 1 month\n *\n * @name secondsInMonth\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMonth = secondsInYear / 12;\n/**\n * Seconds in 1 quarter\n *\n * @name secondsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInQuarter = secondsInMonth * 3;","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function trunc(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n  var duration = {};\n  duration.years = Math.abs(differenceInYears(end, start));\n  var sign = compareAsc(end, start);\n  var remainingMonths = add(start, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(end, remainingMonths));\n  var remainingDays = add(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(end, remainingDays));\n  var remainingHours = add(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(end, remainingHours));\n  var remainingMinutes = add(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(end, remainingMinutes));\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(end, remainingSeconds));\n  return duration;\n}","import { useRef, useState } from 'react'\n\nimport { Button } from '../../components/button'\nimport { useInterval } from './twenty-five-plus-five-clock.hooks'\n\nimport accurateInterval from 'accurate-interval'\nimport { addSeconds, addMinutes, intervalToDuration } from 'date-fns'\n\nconst BREAK_LENGTH = 5 // minutes\nconst SESSION_LENGTH = 25 // minutes\nconst TOP_LIMIT = 60\nconst BOTTOM_LIMIT = 1\n\nexport const TwentyFivePlusFiveClock: React.FC = () => {\n  const [breakLength, setBreakLength] = useState(BREAK_LENGTH)\n  const [sessionLength, setSessionLength] = useState(SESSION_LENGTH)\n  const [time, setTime] = useState<Date>()\n  const [start, setStart] = useState<Date>()\n  const [isRunning, setIsRunning] = useState(false)\n  const [state, setState] = useState<'Session' | 'Break'>('Session')\n  const audioRef = useRef<HTMLAudioElement>(null)\n\n  const now = new Date()\n\n  const end = start\n    ? addMinutes(start, state === 'Session' ? sessionLength : breakLength)\n    : addMinutes(now, state === 'Session' ? sessionLength : breakLength)\n\n  const timeLeft =\n    time && end\n      ? intervalToDuration({ start: time, end })\n      : intervalToDuration({ start: now, end })\n\n  if (\n    timeLeft.hours === 0 &&\n    timeLeft.minutes === 0 &&\n    timeLeft.seconds === 0\n  ) {\n    accurateInterval(\n      () => {\n        audioRef?.current?.play()\n        setState(state === 'Break' ? 'Session' : 'Break')\n        setStart(now)\n        setTime(now)\n      },\n      1000,\n      { aligned: true, immediate: false },\n    )\n  }\n\n  const getFormattedTimeLeft = () => {\n    const minutes =\n      timeLeft?.hours === 1\n        ? 60\n        : timeLeft?.minutes?.toString().padStart(2, '0')\n    const seconds = timeLeft?.seconds?.toString().padStart(2, '0')\n\n    return `${minutes}:${seconds}`\n  }\n\n  const handleReset = () => {\n    if (breakLength !== BREAK_LENGTH) {\n      setBreakLength(BREAK_LENGTH)\n    }\n\n    if (sessionLength !== SESSION_LENGTH) {\n      setSessionLength(SESSION_LENGTH)\n    }\n\n    setStart(undefined)\n    setTime(undefined)\n    setIsRunning(false)\n    setState('Session')\n\n    if (audioRef.current) {\n      audioRef.current.pause()\n      audioRef.current.currentTime = 0\n    }\n  }\n\n  const handleBreakDecrement = () => {\n    if (breakLength > BOTTOM_LIMIT) {\n      setBreakLength(breakLength - 1)\n    }\n  }\n\n  const handleBreakIncrement = () => {\n    if (breakLength < TOP_LIMIT) {\n      setBreakLength(breakLength + 1)\n    }\n  }\n\n  const handleSessionDecrement = () => {\n    if (sessionLength > BOTTOM_LIMIT) {\n      setSessionLength(sessionLength - 1)\n    }\n  }\n\n  const handleSessionIncrement = () => {\n    if (sessionLength < TOP_LIMIT) {\n      setSessionLength(sessionLength + 1)\n    }\n  }\n\n  const handleStartStop = () => {\n    setIsRunning(!isRunning)\n\n    if (!start) {\n      const now = new Date()\n\n      setStart(now)\n      setTime(now)\n    }\n  }\n\n  useInterval(\n    () => {\n      setTime((time) => {\n        const newTime = time ? addSeconds(time, 1) : addSeconds(start!, 1)\n\n        return newTime\n      })\n    },\n    isRunning ? 1000 : null,\n  )\n\n  return (\n    <div>\n      <Button\n        id=\"start_stop\"\n        data-testid=\"play-pause\"\n        onClick={handleStartStop}\n      >\n        Play/Pause\n      </Button>\n\n      <Button id=\"reset\" onClick={handleReset}>\n        Reset\n      </Button>\n\n      <h2 id=\"break-label\">Break Length</h2>\n      <p id=\"break-length\" data-testid=\"break-length\">\n        {breakLength}\n      </p>\n      <Button\n        id=\"break-decrement\"\n        data-testid=\"break-decrement\"\n        onClick={handleBreakDecrement}\n      >\n        Decrease\n      </Button>\n      <Button\n        id=\"break-increment\"\n        data-testid=\"break-increment\"\n        onClick={handleBreakIncrement}\n      >\n        Increase\n      </Button>\n\n      <h2 id=\"session-label\">Session Length</h2>\n      <p id=\"session-length\" data-testid=\"session-length\">\n        {sessionLength}\n      </p>\n      <Button\n        id=\"session-decrement\"\n        data-testid=\"session-decrement\"\n        onClick={handleSessionDecrement}\n      >\n        Decrease\n      </Button>\n      <Button\n        id=\"session-increment\"\n        data-testid=\"session-increment\"\n        onClick={handleSessionIncrement}\n      >\n        Increase\n      </Button>\n\n      <p id=\"timer-label\">{state}</p>\n      <p id=\"time-left\" data-testid=\"time-left\">\n        {getFormattedTimeLeft()}\n      </p>\n\n      {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n      <audio\n        id=\"beep\"\n        preload=\"auto\"\n        ref={audioRef}\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n      />\n    </div>\n  )\n}\n"],"names":["accurateInterval","func","interval","opts","clear","nextAt","timeout","wrapper","now","scheduledTime","useInterval","callback","delay","savedCallback","useRef","useEffect","tick","toInteger","dirtyNumber","number","requiredArgs","required","args","_typeof","obj","toDate","argument","argStr","addDays","dirtyDate","dirtyAmount","date","amount","addMonths","dayOfMonth","endOfDesiredMonth","daysInMonth","add","duration","years","months","weeks","days","hours","minutes","seconds","dateWithMonths","dateWithDays","minutesToAdd","secondsToAdd","msToAdd","finalDate","addMilliseconds","timestamp","getTimezoneOffsetInMilliseconds","utcDate","startOfDay","MILLISECONDS_IN_DAY","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","MILLISECONDS_IN_MINUTE","addMinutes","addSeconds","compareAsc","dateLeft","dateRight","diff","millisecondsInMinute","millisecondsInHour","differenceInCalendarMonths","yearDiff","monthDiff","differenceInCalendarYears","compareLocalAsc","differenceInDays","sign","difference","isLastDayNotFull","result","differenceInMilliseconds","roundingMap","value","defaultRoundingMethod","getRoundingMethod","method","differenceInHours","options","differenceInMinutes","endOfDay","endOfMonth","month","isLastDayOfMonth","differenceInMonths","isLastMonthNotFull","differenceInSeconds","differenceInYears","isLastYearNotFull","intervalToDuration","start","end","remainingMonths","remainingDays","remainingHours","remainingMinutes","remainingSeconds","BREAK_LENGTH","SESSION_LENGTH","TOP_LIMIT","BOTTOM_LIMIT","TwentyFivePlusFiveClock","breakLength","setBreakLength","useState","sessionLength","setSessionLength","time","setTime","setStart","isRunning","setIsRunning","state","setState","audioRef","timeLeft","getFormattedTimeLeft","_a","_b","handleReset","handleBreakDecrement","handleBreakIncrement","handleSessionDecrement","handleSessionIncrement","handleStartStop","now2","time2","newTime","_jsxs","_jsx","Button"],"mappings":"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"}